<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R to Python Translation on Columbia Psychology Scientific Computing</title>
    <link>/tutorials/python/1-r2python-translation/</link>
    <description>Recent content in R to Python Translation on Columbia Psychology Scientific Computing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/tutorials/python/1-r2python-translation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Choosing Between R and Python</title>
      <link>/tutorials/python/1-r2python-translation/0-python-r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/python/1-r2python-translation/0-python-r/</guid>
      <description>A few quick points:  Among scientific computing languages the best language for you is the one that you find best fits your projects We really encourage the use of either R and Python for research computing for several reasons  R and Python are open source! We believe in making scientific computing as accessible to as many people as possible R and Python both have TONS of tools for research computing, lots of documentation, and huge support communities around the world    Neither language is &amp;lsquo;better&amp;rsquo; than the other Depending on your application, one might be better suited R Strengths  Statistical Programming Language Visualization(ggplot) Web apps (shiny) Statistical Model Interpretation  Python Strengths  All purpose programming language Neuroimaging Task design (psychopy, pygame) Machine learning (sklearn, tensorflow, keras) Many programs/web tools have great python APIs Web scraping  For research, helpful to know some of both!</description>
    </item>
    
    <item>
      <title>Getting Started with Jupyter Notebooks</title>
      <link>/tutorials/python/1-r2python-translation/1-getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/python/1-r2python-translation/1-getting-started/</guid>
      <description>Goals:  Students will feel comfortable navigating the jupyter notebook layout Students will be able to access their computer&amp;rsquo;s file structure through jupyter notebook  Links to Files The files for all tutorials can be downloaded from the Columbia Psychology Scientific Computing GitHub page using these instructions. This particular file is located here: /content/tutorials/python/1-r2python-translation/1-getting-started.ipynb.
What is a jupyter notebook anyway?  Jupyter notebooks are a tool for working in python (and other languages).</description>
    </item>
    
    <item>
      <title>Intro to Programming in Python</title>
      <link>/tutorials/python/1-r2python-translation/2-intro-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/python/1-r2python-translation/2-intro-programming/</guid>
      <description>Disclaimer!  This intro programming tutorial in python is NOT nearly as comprehensive as the intro programming tutorial in R. If you have never programmed in any language before, this tutorial may skip key pieces of information Instead, the goal of this tutorial is to provide some key pieces of &amp;lsquo;translation&amp;rsquo; information for people with some programming experience who would like to use python  Goals of this lesson Students will:  Understand and be comfortable working with the basic data types in python Be able to use arithmetic, relational operators, and lists in python For those coming from R, be aware of differences across languages, especially in indexing  Links to Files The files for all tutorials can be downloaded from the Columbia Psychology Scientific Computing GitHub page using these instructions.</description>
    </item>
    
    <item>
      <title>Control Flow in Python</title>
      <link>/tutorials/python/1-r2python-translation/3-control-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/python/1-r2python-translation/3-control-flow/</guid>
      <description>Goals of this lesson Students will learn:  How to use if/else and for loops in python How to indent code correctly in python  Links to Files The files for all tutorials can be downloaded from the Columbia Psychology Scientific Computing GitHub page using these instructions. This particular file is located here: /content/tutorials/python/1-r2python-translation/3-control-flow.ipynb.
Indenting in python  Python, unlike R, is strict about indentation! Indentations in python often have bearing on the order in which they are executed, and switching indentation can change how code runs (or break it) Coming from R, indentation might seem annoying at first, but eventually this can help with code readability Ultimately, python is trying to help us stay organized  If statements  If statements in python are the equivalent of the following English: &amp;ldquo;If condition X is met, then do action Y&amp;rdquo; If statements in python consist of the following syntax  if (condition X): actions.</description>
    </item>
    
  </channel>
</rss>